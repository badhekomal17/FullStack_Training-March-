/////////index.html
<html>
    <head></head>

    <body>
         <h1>
            JAVASCRIPT TRAINING!!!!!!!!!!!!!
        </h1> 
        <button id="btn" onclick="alert(incCounter())">IncCounter</button>
            <script>
               // let count=0
            //    function incCounter(){//global scope avoided but counter does not
            //    let count=0
            //    return ++count
            //    }

               var incCounter=(function(){
                   let count=0
                   return function(){
                       return ++count
                   }
               })()
            </script>
        
<!-- <script>
    console.log('js in head')
</script> -->
<!-- <script src="variables.js"></script> -->
 <!-- <script src="programFlow.js"></script>  -->
<!-- <script src="functions.js"></script> -->
<!-- <script src="FunctionAgain.js"></script> -->
<script src="hoisting.js"></script>
    
</body>


</html>





/////variables.js

//'use strict'

var x=10 //es5
x='Hi'
console.log(x)
y='Hello' //not to be usedd -global variab;
console.log(y)
let z=true //most recomended
console.log(z)
const c=40 //
// c=c+1
// console.log(c)
//camel case
//let _numOne
/*
*/
//types -DataTypes
//console.log('-----------')
let num1=34.5
let numInt=34
console.log(num1 + 'and' +  numInt)
console.log(typeof num1 + 'Data type of num1')  
console.log(typeof numInt + 'Data type of numInt')
let name='kirti'
console.log(`my name is $(name) and the data type is ${typeof name}`) 
let isCorona=false
console.log(`Do i have Covid-19 ${isCorona} and 
type is ${typeof isCorona}`)
let test
console.log(typeof test)
let user=null
console.log(typeof user)
let person={}//empty object
console.log(person)
let empId=45456
let employee={
    empId,
    empName:'kirti',
    deptName:'Trainee',
    isEmployed:true,
    salary:45456655
};
console.log(employee)
console.log(employee.detName)

//constructor function
function Employee(fname,lname){
    this.fname=fname
    this.lname=lname
}
console.log
(Employee)
let e1=new Employee()
e1.fname='karauna'
e1.lname='komal'
console.log(e1)
//long hand notation of creating an object
var stud =new Object()

stud.rollno=123
stud.name='kirti'
stud.marks=56
console.log(`Student ${stud}`)
var stud1={}
console.log(`Student1 ${stud1}`)

let arr=[3,4,5,6]//short hand notation
let arr1=new Array(3,4,5,6)
// arr1[0]=3
console.log(arr===arr1)
console.log(arr[0]==arr[0])
//equality
let a='3'
let b=3
console.log(a!==b)



///////////////////programFlow.js

if(5==5){
    console.log('yes')

}
if(5>10){
    console.log('No')
}
if(5>=5){
    console.log('yes')
}
if(5){ //If statement always return a truthy
    console.log('yes')
}
if(5){
    var x=20
    x=x+1
    console.log(x)
}
console.log(x)//let has block level scope
let designation ='manager'
if(designation){
    console.log('Avail company car')
}
else{
    console.log('use public transport')
}
console.log('Truthy revisited*************')
if(' '){
    console.log('Yes for empty string ')
}else{
    console.log('No for empty string')
}
if(null){
    console.log('YES for null value')
}else{
    console.log('No for null value')
}
if(0){
    console.log('YES for 0 value')
}else{
    console.log('No for 0 value')
}



//ternary operator
//(condition)true-statement:false statement
let transport=(designation)?'Avail company car'
:'public transport'
console.log(transport)
console.log('for loops')
var nums=[2,5,6,9,0,1]
for (let i=0;i<nums.length;i++){
    console.log(nums[i])
}
console.log('FOR IN----')
for(let n in nums)//in gives index number
console.log(n)

console.log('FOR OFF----')
for(let n of nums)//in gives index number
console.log(n)

//use for in when working with object or non enumerables
//use for of when working with enumerables

var person={
    fname:'Hi',
    lname:'Hello'
}

for(let p in person){
    console.log(p)
}
//while loop
let count=1
while(count<=10){
    console.log(count)
    count++

}




//////////////////////////FunctionAgain.js

let productId=1234//global scope
function showProductId(){
    let productId=4567//function scope
    console.log(`productId in showProductId() 
    is : ${productId}`)
}
console.log(`productId after showProductId() 
is : ${productId}`)
showProductId()
console.log(`-----------`)

//closures in js
// let greeting=(function(){
//     let message='Hello'
//     let getMessage=function(){
//         return message
//     }
// })()
// console.log(greeting().message)
let a=10
function outer(b){
    
    function middle(c){
        
        function inner(){
        console.log(`${a},${b},${c}`)
        }
        inner()
  
    }
    middle(20)
}
outer(30)

//clouser
let greeting=(function(){
    let message='Hello'
    let getMessage=function(){
        return message 
    }
    return{
    getMessage
    }
})()
console.log(greeting.getMessage())



////////////functions.js

function greet(message){
return message
}
console.log(greet('Hello'))
//anonymous function

 let output=function(num1, num2){
    let res=num1 + num2
    return res
}
console.log(output(5,6));

//IIFE
(function(a,b){
    console.log(a+b)

})('Learning',' Function')

//arrow functions introduced in ES6
function addNums(a,b){
return a+b
}
console.log(addNums(4,4))
let arrow1=(a,b)=>{
console.log('multiple lines')
a+b
}
console.log(arrow1(6,7))

//arrow function with one parameter
let arrow2=a=>a+5
console.log(arrow2(6))

let arrow3=()=>console.log('no parameter')
console.log(arrow3())


////////////hoisting.js


// console.log(productId)//undefined
// var productId=1234

// var productId=4567
// console.log(productId)
// var productId=123//undefined

// var productId=4567
// console.log(productId)
// let productId=123//Uncaught SyntaxError: Identifier 'productId' has already been declared

showProductId()
function showProductId(){
    let productId=1234
    console.log(productId)
}

function addNums(a,b){
    return a+b
}
console.log(addNums(4,5) + ' both Numbers')
console.log(addNums('Lets','Break') +  ' both strings')
console.log(addNums(4) + ' one numeric parameter')
console.log(addNums('break',4) + ' one string and one number')
console.log(addNums() + ' no parameter')


const vars={
    num1:10,
    str:'Hello'
}
//`use strict`;
let res=100
delete res
res=res+1
console.log(res)


///////////////exceptions.js

function tryCatch(){
    let result
    try{
        result=x/10
        console.log('this statement is after the error in try')
    }
    catch(error){
        console.log(error.message)
    }
    finally{
        console.log('will always get executed')
    }
}
tryCatch()


//custom errors
function throwError(){
    try{
        attemptDiv()
    }catch(error){
        console.log(`${error.message}:
        Error Type: ${error.name}`)

    }
}
function attemptDiv(){
    let result
    try{
        result=x/10
    }catch(error){
        throw{
            "message":"attemptDiv method x is not defined"
            + error.message,
            "name":"my custom error"
        }
    }
}
throwError()

///////////thisKeyword.js


console.log(this)

let person={
    fname:'David',
    lname:'smith',
    fullName:function(){ 
        return this.fname + ' '+ this.lname
}  
}
console.log(person.fullName())

//constructor function

function Emp(empId,ename){
    this.eid=empId
    this.name=ename
}
let e1=new Emp(100,'abc')
console.log('using call')
console.log('person.fullName.call()')

function callEg(a,b){
    a='param1'
    b='param2'
    console.log(a + ' ' + b)
}
callEg.call('param1','param2')


///////////arraysAgain.js


let str='This is immutable'
let res='Hello' + str
console.log(res)

let num=10
num=num+1
console.log(num)


let nums=[2,4,5]
let arr= new Array(1,3,5)
let arrs=Array.of(10,20,30)
console.log(arrs)

nums.push(8)
console.log(nums)

let chars= ['a','b','c']
let newValues=chars.slice(1,2)
console.log(newValues + ' use of slice method')
let newVal=chars.slice()
console.log(newVal + ' use of slice method with no param')
let newv=chars.slice(1)
console.log(newv + ' use of slice method with one param')
console.log(chars)


//splice 
chars.splice(1,1)
console.log(chars + ' after using splice with 2 param')
chars.splice(1)
console.log(chars + ' after using splice with 1 param')
chars.splice()
console.log(chars + ' after using splice with No param')





